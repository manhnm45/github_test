#include <iostream>

#include<stdio.h>
using namespace std;

struct node
{
    int data;
    struct node *next;
    struct node *prev;
};

struct list
{
    struct node *head;
   struct node *tail;
};
void khaibao (list &l)
{
    l.head= NULL;
    l.tail= NULL;
}
node *creatnode(int x)
{
    node *p=new node;
    p->data=x;
    p->next=NULL;
    p->prev=NULL;
    return p;
}
bool isEmpty(list l)
{
    return (l.head==NULL);
}
void addtail(list &l, int x)
{
    node *p= creatnode(x);
    if(isEmpty(l))
    {
        l.head = l.tail=p;
    }
    else{

        l.tail->next= p;
        p->prev=l.tail;
        l.tail= p;
    }
}
void nhaplist(list &l)
{
    int n,x;

    cout<<"nhap so phan tu"<<endl;
    cin>>n;
    cout<<"nhap danh sach"<<endl;
    for(int i=0;i<n;i++)
    {
        cin>>x;
        addtail(l,x);
    }
}
void swapnode(struct node *x,struct node *y )
{
    struct node *t=new node;
    t->data=x->data;
    x->data=y->data;
    y->data=t->data;
}
void inra(struct list l)
{
    struct node *p=l.head;
   while(p!=NULL)
   {
       cout<<p->data;
       p=p->next;
   }
}
void buble( list &l)
{
    int x=0;
    struct node *p;
    struct node *q;
    for(q=l.tail ;q->prev!= NULL;q=q->prev)
    {
       for(p=l.head;p != q; p=p->next)
            {
                if(p->data > p->next->data)
                    {
                       swapnode(p,p->next);
                        x=1;
                    }

            }
            if(x==0) break;
    }

}

int main()
{
    struct list l;
    khaibao(l);
    nhaplist(l);
    //inra(l);
    buble(l);
    inra(l);
    return 0;

}
